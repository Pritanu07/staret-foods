name: CI/CD

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.tf'      
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**.tf'
  workflow_run:
    workflows:
      - "Terraform Workflow"
    types:
      - completed

#ECS Deployment

env:            
  AWS_REGION: ap-southeast-1          
  ECR_REPOSITORY: priya-ecr2
  ECS_SERVICE: priya-ecs2-service         
  ECS_CLUSTER: priya-ecs2-cluster                   
  CONTAINER_NAME: priya-ecs2-container         
                                               

# permissions:
#   contents: read

jobs:
  build-and-test:    #CI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test   

#scan-dependencies
  scan-dependencies:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run installation of dependencies command
        run: npm audit


#Deploy to ECS
  deploy:
    name: Deploy
    needs: scan-dependencies
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Download task definition
      run: |
        NEW_TASK_DEFINTION=$(aws ecs describe-task-definition --task-definition priya-ecs2-task \
        --query '{  containerDefinitions: taskDefinition.containerDefinitions,
                    family: taskDefinition.family,
                    taskRoleArn: taskDefinition.taskRoleArn,
                    executionRoleArn: taskDefinition.executionRoleArn,
                    networkMode: taskDefinition.networkMode,
                    volumes: taskDefinition.volumes,
                    placementConstraints: taskDefinition.placementConstraints,
                    requiresCompatibilities: taskDefinition.requiresCompatibilities,
                    cpu: taskDefinition.cpu,
                    memory: taskDefinition.memory}')
      
        aws ecs register-task-definition  --family task-family --cli-input-json "$NEW_TASK_DEFINTION"
        aws ecs update-service --cluster priya-ecs2-cluster --service priya-ecs2-service --task-definition priya-ecs2-task

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME  }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER  }}
        wait-for-service-stability: true