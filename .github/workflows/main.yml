name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]
#jobs:
  #pre-deploy:
    #runs-on: ubuntu-latest
    #steps:
       #- run: echo "The job is automatically triggered by a ${{ github.event_name }} event."

  install-dependencies:
    runs-on: ubuntu-latest
    needs: pre-deploy
    steps:
       - name: Check out repository code
         uses: actions/checkout@v3
       - name: Run installation of dependencies commands
        run: npm install

  unit-testing:
     runs-on: ubuntu-latest
     needs: install-dependencies
     steps:
       - name: Check out repository code
         uses: actions/checkout@v3
       - name: Run installation of dependencies commands
         run: npm install
       - name: Run unit testing command
          run: npm test 
  retrieve-secret:
       runs-on: ubuntu-latest
       needs: package-scan
       steps:
        - name: Retrieve secret from AWS Secrets Manager
          run: |
            SECRET=$(aws secretsmanager get-secret-value --secret-id my-secret | jq -r '.SecretString')
            echo "SECRET=$SECRET" >> $GITHUB_ENV
  package-scan:
     runs-on: ubuntu-latest
     needs: unit-testing
     steps:
       - name: Check out repository code
         uses: actions/checkout@v3
       - name: Run installation of dependencies commands
         run: npm install
       - name: Run audit
         run: npm audit

env:            
  AWS_REGION: ap-southeast-1           
  ECR_REPOSITORY: priya-ecr2       
  ECS_SERVICE: priya-ecs2-service      
  ECS_CLUSTER: priya=ecs2-cluster                 
  CONTAINER_NAME: priya-ecs2-container      
                                               

# permissions:
#   contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition priya-ecs2-service --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        ACCESS_KEY: ${ssm:priya-ps}