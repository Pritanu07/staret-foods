name: Deploy to ECR - Build Docker Image - Deploy ECS

on:
push:
branches:
- main

jobs:
vulnerabilities-audit:
name: Check for Vulnerabilities with npm audit
runs-on: ubuntu-latest
steps:
- name: Check out code
uses: actions/checkout@v2
- name: Set up Node.js
uses: actions/setup-node@v2
with:
  node-version: '16'
- name: Install dependencies
run: npm install
- name: Run npm audit
run: npm audit

run_unit_tests:
name: Run Unit Tests
needs: vulnerabilities-audit
runs-on: ubuntu-latest
steps:
- name: Check out code
uses: actions/checkout@v2
- name: Set up Node.js
uses: actions/setup-node@v2
with:
  node-version: '16'
- name: Install dependencies
run: npm install
- name: Run unit tests
run: npm test

ecr_creation:
name: Create ECR Repository
needs: run_unit_tests
runs-on: ubuntu-latest
steps:
- name: Check out code
uses: actions/checkout@v2

- name: Configure AWS credentials
uses: aws-actions/configure-aws-credentials@v1
with:
  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  aws-region: ap-southeast-1

- name: Set up Terraform
uses: hashicorp/setup-terraform@v1
with:
  terraform_version: 1.0.0
phases:
pre_build:
  commands:
  - echo Logging in to Amazon ECR...
  - echo $AWS_DEFAULT_REGION
  # - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin 940401905947.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  - REPOSITORY_NAME="priya-ecr2"      
  - REPOSITORY_URI=255945442255.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$REPOSITORY_NAME
  - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
  - IMAGE_TAG=${COMMIT_HASH:=latest}
build:
  commands:
  - echo Building the Docker image...
  - docker build -t $REPOSITORY_NAME:latest .
  - docker tag $REPOSITORY_NAME:latest $REPOSITORY_URI:latest
  - docker tag $REPOSITORY_NAME:latest $REPOSITORY_URI:$IMAGE_TAG
post_build:
  commands:
  - docker push $REPOSITORY_URI:latest
  - docker push $REPOSITORY_URI:$IMAGE_TAG
  - printf '[{"name":"priya-ecs2-task","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json

#artifacts:
#files: imagedefinitions.json
#- name: Check if ECR repository already exists
#id: check_ecr
# working-directory: ecr
#run: |
  # terraform init
#- name: Deploy ECR using Terraform
#if: steps.check_ecr.outputs.exists == 'false'
#working-directory: ecr
# run: |
  #terraform init
  # terraform apply -auto-approve

#docker_build_push:
#name: Build Docker Image and Push to ECR
#needs: ecr_creation
# runs-on: ubuntu-latest

#steps:
#- name: Check out code
# uses: actions/checkout@v2

# - name: Configure AWS credentials
#uses: aws-actions/configure-aws-credentials@v1
# with:
  #aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # aws-region: ap-southeast-1

#- name: Log in to Amazon ECR
#id: login-ecr
#uses: aws-actions/amazon-ecr-login@v1

#- name: Build and Push Docker image to Amazon ECR
#env:
  #ECR_REGISTRY: 255945442255.dkr.ecr.ap-southeast-1.amazonaws.com
  #ECR_REPOSITORY: priya-devsecops-application
  #IMAGE_TAG: latest
#run: |
  # docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
  #docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

terraform_force_deployment:
name: Force New Deployment with Terraform
needs: [docker_build_push, ecr_creation]
runs-on: ubuntu-latest

steps:
- name: Check out code
uses: actions/checkout@v2

- name: Configure AWS credentials
uses: aws-actions/configure-aws-credentials@v1
with:
  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  aws-region: ap-southeast-1

- name: Set up Terraform
uses: hashicorp/setup-terraform@v1
with:
  terraform_version: 1.0.0

- name: Taint ECS service for force new deployment
#working-directory: ecs
run: |
  terraform init
  terraform taint aws_ecs_service.priya-ecs2-service
  terraform apply -auto-approve

